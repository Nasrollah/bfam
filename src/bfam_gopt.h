#ifndef BFAM_GOPT_H
#define BFAM_GOPT_H

#define BFAM_GOPT_ONCE   0
#define BFAM_GOPT_REPEAT 1
#define BFAM_GOPT_NOARG  0
#define BFAM_GOPT_ARG    2

/*
 * Moved this from an anonymous struct inside of bfam_gopt_start because
 * clang was barfing.
 */
struct gopt_struct {
  int k;
  int f;
  const char *s;
  const char*const*l;
};

#define bfam_gopt_start(...)      \
  (const void*)(const struct gopt_struct[]){ __VA_ARGS__, {0,0,NULL,NULL}}
#define bfam_gopt_option(k,f,s,l) { k, f, s, l }
#define bfam_gopt_shorts( ... )   \
  (const char*)(const char[]){ __VA_ARGS__, 0 }
#define bfam_gopt_longs( ... )    \
  (const char**)(const char*[]){ __VA_ARGS__, NULL }


/** Sorts options.
 *
 * This function prints to stderr and call exit() on error.
 *
 * \param[in] argc      number of arguments
 * \param[in] argv      array of arguments
 * \param[in] opt_specs options specification generated by \c bfam_gopt_start()
 *
 * \returns a pointer for use in the following calls
 */
void *bfam_gopt_sort(int *argc, const char **argv, const void *opt_specs);

/** Check if option associated with \a key is specified.
 *
 * \param[in] opts options returned from \c bfam_gopt_sort()
 * \param[in] key  option key
 *
 * \returns the number of times the option was specified
 *          which will be 0 or 1 unless \c BFAM_GOPT_REPEAT was used
 */
size_t bfam_gopt(const void *opts, int key);

/** Get option associated with \a key and its argument.
 *
 * Writes a pointer to the option argument from the first (or only) occurrence
 * to \c *arg.
 *
 * \param[in]  opts options returned from \c bfam_gopt_sort()
 * \param[in]  key  option key
 * \param[out] arg  pointer to the value of the argument
 *
 * \returns the number of times the option was specified
 */
size_t bfam_gopt_arg(const void *opts, int key, const char **arg);

/** Get \a i'th occurrence of an option.
 *
 * \param[in] opts options returned from \c bfam_gopt_sort()
 * \param[in] key  option key
 * \param[in] i    the occurrence number
 *
 * \returns a pointer to the \a i'th (starting at zero) occurrence of the
 *          option, or \c NULL if it was not specified that many times
 */
const char *bfam_gopt_arg_i(const void *opts, int key, size_t i);

/** Get all the arguments to a repeated option.
 *
 * Writes pointers to the \a option arguments in the order of occurrence to
 * \a args[].  It writes at most \a args_len pointers.
 * If the return value is less than \a args_len, also writes a \c NULL pointer.
 *
 * \param[in]  opts options returned from \c bfam_gopt_sort()
 * \param[in]  key  option key
 * \param[out] args pointers to the values of the multiple arguments
 *
 * \returns the number of times the option was specified
 */
size_t bfam_gopt_args(const void *opts, int key, const char **args,
    size_t args_len);

/** Release memory for options.
 *
 * Releases memory allocated in the corresponding call to \c bfam_gopt_sort()
 * \c opts can no longer be used.
 *
 * \param[in] opts options to free
 */
void bfam_gopt_free(void *opts);

#endif
